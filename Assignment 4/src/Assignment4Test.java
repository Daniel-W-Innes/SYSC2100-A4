import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class Assignment4Test {
    private static final Integer[] PASS = new Integer[]{428, 946, 534, 720, 668, 79, 294, 262, 125, 548, 531, 610, 523, 893, 119, 630, 289, 206, 296, 20, 750, 126, 443, 935, 994, 326, 141, 698, 524, 662, 992, 120, 412, 314, 935, 33, 835, 384, 464, 726, 434, 636, 781, 902, 562, 855, 899, 637, 979, 283, 948, 327, 932, 539, 407, 448, 469, 350, 775, 255, 483, 43, 533, 608, 465, 242, 855, 663, 619, 519, 738, 528, 641, 659, 240, 2, 982, 28, 769, 444, 735, 39, 665, 790, 487, 787, 117, 285, 469, 62, 492, 140, 547, 216, 282, 275, 902, 823, 189, 617, 975, 337, 252, 89, 341, 714, 961, 295, 508, 916, 789, 709, 843, 117, 731, 430, 399, 813, 374, 361, 745, 279, 140, 545, 618, 487, 747, 251, 287, 732, 30, 444, 216, 623, 588, 475, 876, 753, 745, 233, 95, 77, 433, 673, 8, 416, 897, 812, 442, 452, 168, 788, 717, 573, 327, 157, 393, 418, 628, 492, 907, 126, 660, 346, 549, 673, 251, 33, 658, 54, 457, 604, 933, 306, 184, 15, 219, 604, 365, 979, 791, 195, 33, 750, 542, 663, 139, 177, 623, 445, 565, 36, 941, 605, 93, 932, 590, 401, 883, 288, 645, 103, 67, 218, 154, 884, 433, 232, 460, 631, 310, 14, 78, 981, 355, 425, 226, 373, 433, 86, 668, 104, 614, 646, 487, 778, 815, 886, 730, 478, 791, 861, 562, 956, 24, 939, 308, 623, 789, 707, 29, 955, 472, 673, 929, 963, 835, 57, 133, 216, 142, 292, 331, 895, 206, 211, 188, 317, 97, 868, 573, 99, 869, 762, 39, 482, 395, 359, 433, 153, 174, 694, 985, 300, 759, 102, 400, 20, 668, 152, 254, 398, 70, 551, 701, 374, 963, 816, 78, 381, 617, 859, 718, 331, 346, 757, 376, 820, 478, 141, 209, 357, 307, 151, 287, 484, 105, 486, 920, 188, 822, 732, 261, 135, 261, 329, 836, 852, 31, 781, 690, 573, 91, 181, 58, 775, 803, 3, 711, 808, 120, 787, 419, 814, 254, 439, 708, 186, 2, 733, 858, 905, 33, 295, 601, 758, 570, 257, 1, 449, 456, 471, 225, 782, 755, 473, 762, 373, 761, 353, 67, 418, 639, 582, 607, 467, 853, 437, 727, 36, 325, 292, 295, 282, 745, 174, 288, 769, 313, 159, 969, 36, 733, 464, 554, 602, 762, 186, 37, 750, 739, 447, 785, 353, 495, 840, 398, 385, 71, 599, 977, 308, 795, 432, 497, 196, 248, 559, 375, 792, 644, 951, 533, 548, 208, 527, 617, 158, 141, 9, 182, 98, 638, 913, 580, 114, 531, 276, 826, 987, 148, 190, 914, 572, 30, 980, 449, 504, 769, 31, 498, 276, 715, 55, 261, 532, 694, 728, 95, 804, 877, 111, 535, 160, 450, 415, 630, 755, 20, 326, 762, 317, 226, 318, 541, 690, 52, 60, 175, 733, 515, 684, 941, 888, 676, 540, 62, 886, 702, 93, 181, 688, 228, 221, 649, 364, 585, 47, 230, 950, 718, 124, 489, 198, 71, 757, 443, 833, 347, 692, 693, 64, 478, 415, 797, 588, 561, 997, 548, 189, 204, 35, 690, 516, 781, 353, 626, 177, 90, 607, 79, 136, 848, 415, 635, 374, 623, 308, 157, 977, 518, 675, 349, 931, 537, 826, 363, 26, 640, 769, 917, 132, 184, 982, 451, 878, 135, 552, 958, 534, 23, 623, 912, 105, 764, 263, 987, 609, 997, 253, 624, 914, 551, 419, 356, 59, 945, 886, 512, 348, 873, 952, 63, 910, 467, 260, 23, 426, 809, 789, 667, 138, 892, 24, 9, 811, 925, 718, 696, 952, 802, 456, 152, 466, 325, 593, 153, 179, 415, 312, 725, 342, 867, 258, 769, 627, 204, 49, 758, 94, 929, 697, 486, 195, 370, 116, 132, 721, 349, 951, 971, 927, 339, 810, 567, 453, 540, 123, 753, 232, 430, 736, 356, 384, 177, 383, 221, 352, 219, 143, 739, 556, 216, 440, 882, 993, 736, 973, 275, 488, 757, 168, 806, 169, 994, 138, 808, 820, 636, 449, 719, 852, 687, 829, 795, 954, 951, 545, 721, 10, 10, 377, 671, 727, 862, 276, 880, 528, 93, 64, 882, 224, 52, 722, 652, 962, 666, 442, 449, 13, 349, 732, 354, 878, 431, 221, 191, 744, 398, 948, 608, 433, 507, 322, 560, 811, 331, 738, 233, 235, 225, 774, 612, 810, 974, 295, 185, 682, 672, 529, 935, 412, 67, 741, 783, 498, 20, 960, 130, 907, 947, 487, 425, 936, 14, 956, 306, 179, 510, 773, 871, 574, 738, 152, 98, 55, 660, 634, 917, 717, 545, 979, 767, 592, 16, 83, 357, 488, 482, 355, 980, 718, 482, 244, 51, 943, 54, 507, 375, 279, 198, 553, 427, 594, 741, 476, 789, 724, 541, 271, 424, 39, 684, 154, 296, 159, 339, 985, 970, 488, 436, 918, 947, 923, 103, 86, 435, 976, 688, 986, 737, 345, 758, 620, 629, 342, 683, 426, 949, 575, 95, 99, 440, 560, 367, 62, 132, 910, 546, 389, 484, 518, 449, 555, 536, 694, 875, 14, 876, 276, 783, 774, 515, 54, 760, 746, 834, 770, 845, 353, 535, 582, 739, 806, 150, 786, 933, 183, 707, 171, 130, 603, 815, 905, 243, 491, 698, 506, 258, 549, 995, 223, 501, 567, 325, 520, 408, 595, 890, 255, 842, 108, 724, 452, 865, 387, 624, 55, 680, 354, 547, 510, 504, 544, 280, 216, 201, 859, 901, 585, 565, 301, 788, 397, 211, 197, 521, 142, 167, 881, 764, 133, 759, 206, 874, 666, 94, 23, 451, 441, 493, 262, 177, 814, 971, 634, 741, 267, 47, 283, 65, 259, 371, 179, 596, 426, 57, 975, 337, 131, 285, 314, 625, 783, 700, 758, 890, 174, 43, 365, 613, 661, 712, 256, 632, 423, 63, 802, 876, 586, 603, 490, 882, 800, 779, 512, 547, 342, 16, 961, 720, 237, 867, 452, 740, 764, 111, 144, 83, 322, 796, 525, 317, 745, 556, 991, 279, 769, 713, 519, 490, 901, 747, 60, 345, 688, 210, 146, 415, 552, 430, 442, 167, 360, 527, 174, 578, 274, 349, 89};
    private static final Integer[] ANS = new Integer[]{1, 2, 2, 3, 8, 9, 9, 10, 10, 13, 14, 14, 14, 15, 16, 16, 20, 20, 20, 20, 23, 23, 23, 24, 24, 26, 28, 29, 30, 30, 31, 31, 33, 33, 33, 33, 35, 36, 36, 36, 37, 39, 39, 39, 43, 43, 47, 47, 49, 51, 52, 52, 54, 54, 54, 55, 55, 55, 57, 57, 58, 59, 60, 60, 62, 62, 62, 63, 63, 64, 64, 65, 67, 67, 67, 70, 71, 71, 77, 78, 78, 79, 79, 83, 83, 86, 86, 89, 89, 90, 91, 93, 93, 93, 94, 94, 95, 95, 95, 97, 98, 98, 99, 99, 102, 103, 103, 104, 105, 105, 108, 111, 111, 114, 116, 117, 117, 119, 120, 120, 123, 124, 125, 126, 126, 130, 130, 131, 132, 132, 132, 133, 133, 135, 135, 136, 138, 138, 139, 140, 140, 141, 141, 141, 142, 142, 143, 144, 146, 148, 150, 151, 152, 152, 152, 153, 153, 154, 154, 157, 157, 158, 159, 159, 160, 167, 167, 168, 168, 169, 171, 174, 174, 174, 174, 175, 177, 177, 177, 177, 179, 179, 179, 181, 181, 182, 183, 184, 184, 185, 186, 186, 188, 188, 189, 189, 190, 191, 195, 195, 196, 197, 198, 198, 201, 204, 204, 206, 206, 206, 208, 209, 210, 211, 211, 216, 216, 216, 216, 216, 218, 219, 219, 221, 221, 221, 223, 224, 225, 225, 226, 226, 228, 230, 232, 232, 233, 233, 235, 237, 240, 242, 243, 244, 248, 251, 251, 252, 253, 254, 254, 255, 255, 256, 257, 258, 258, 259, 260, 261, 261, 261, 262, 262, 263, 267, 271, 274, 275, 275, 276, 276, 276, 276, 279, 279, 279, 280, 282, 282, 283, 283, 285, 285, 287, 287, 288, 288, 289, 292, 292, 294, 295, 295, 295, 295, 296, 296, 300, 301, 306, 306, 307, 308, 308, 308, 310, 312, 313, 314, 314, 317, 317, 317, 318, 322, 322, 325, 325, 325, 326, 326, 327, 327, 329, 331, 331, 331, 337, 337, 339, 339, 341, 342, 342, 342, 345, 345, 346, 346, 347, 348, 349, 349, 349, 349, 350, 352, 353, 353, 353, 353, 354, 354, 355, 355, 356, 356, 357, 357, 359, 360, 361, 363, 364, 365, 365, 367, 370, 371, 373, 373, 374, 374, 374, 375, 375, 376, 377, 381, 383, 384, 384, 385, 387, 389, 393, 395, 397, 398, 398, 398, 399, 400, 401, 407, 408, 412, 412, 415, 415, 415, 415, 415, 416, 418, 418, 419, 419, 423, 424, 425, 425, 426, 426, 426, 427, 428, 430, 430, 430, 431, 432, 433, 433, 433, 433, 433, 434, 435, 436, 437, 439, 440, 440, 441, 442, 442, 442, 443, 443, 444, 444, 445, 447, 448, 449, 449, 449, 449, 449, 450, 451, 451, 452, 452, 452, 453, 456, 456, 457, 460, 464, 464, 465, 466, 467, 467, 469, 469, 471, 472, 473, 475, 476, 478, 478, 478, 482, 482, 482, 483, 484, 484, 486, 486, 487, 487, 487, 487, 488, 488, 488, 489, 490, 490, 491, 492, 492, 493, 495, 497, 498, 498, 501, 504, 504, 506, 507, 507, 508, 510, 510, 512, 512, 515, 515, 516, 518, 518, 519, 519, 520, 521, 523, 524, 525, 527, 527, 528, 528, 529, 531, 531, 532, 533, 533, 534, 534, 535, 535, 536, 537, 539, 540, 540, 541, 541, 542, 544, 545, 545, 545, 546, 547, 547, 547, 548, 548, 548, 549, 549, 551, 551, 552, 552, 553, 554, 555, 556, 556, 559, 560, 560, 561, 562, 562, 565, 565, 567, 567, 570, 572, 573, 573, 573, 574, 575, 578, 580, 582, 582, 585, 585, 586, 588, 588, 590, 592, 593, 594, 595, 596, 599, 601, 602, 603, 603, 604, 604, 605, 607, 607, 608, 608, 609, 610, 612, 613, 614, 617, 617, 617, 618, 619, 620, 623, 623, 623, 623, 623, 624, 624, 625, 626, 627, 628, 629, 630, 630, 631, 632, 634, 634, 635, 636, 636, 637, 638, 639, 640, 641, 644, 645, 646, 649, 652, 658, 659, 660, 660, 661, 662, 663, 663, 665, 666, 666, 667, 668, 668, 668, 671, 672, 673, 673, 673, 675, 676, 680, 682, 683, 684, 684, 687, 688, 688, 688, 690, 690, 690, 692, 693, 694, 694, 694, 696, 697, 698, 698, 700, 701, 702, 707, 707, 708, 709, 711, 712, 713, 714, 715, 717, 717, 718, 718, 718, 718, 719, 720, 720, 721, 721, 722, 724, 724, 725, 726, 727, 727, 728, 730, 731, 732, 732, 732, 733, 733, 733, 735, 736, 736, 737, 738, 738, 738, 739, 739, 739, 740, 741, 741, 741, 744, 745, 745, 745, 745, 746, 747, 747, 750, 750, 750, 753, 753, 755, 755, 757, 757, 757, 758, 758, 758, 758, 759, 759, 760, 761, 762, 762, 762, 762, 764, 764, 764, 767, 769, 769, 769, 769, 769, 769, 770, 773, 774, 774, 775, 775, 778, 779, 781, 781, 781, 782, 783, 783, 783, 785, 786, 787, 787, 788, 788, 789, 789, 789, 789, 790, 791, 791, 792, 795, 795, 796, 797, 800, 802, 802, 803, 804, 806, 806, 808, 808, 809, 810, 810, 811, 811, 812, 813, 814, 814, 815, 815, 816, 820, 820, 822, 823, 826, 826, 829, 833, 834, 835, 835, 836, 840, 842, 843, 845, 848, 852, 852, 853, 855, 855, 858, 859, 859, 861, 862, 865, 867, 867, 868, 869, 871, 873, 874, 875, 876, 876, 876, 877, 878, 878, 880, 881, 882, 882, 882, 883, 884, 886, 886, 886, 888, 890, 890, 892, 893, 895, 897, 899, 901, 901, 902, 902, 905, 905, 907, 907, 910, 910, 912, 913, 914, 914, 916, 917, 917, 918, 920, 923, 925, 927, 929, 929, 931, 932, 932, 933, 933, 935, 935, 935, 936, 939, 941, 941, 943, 945, 946, 947, 947, 948, 948, 949, 950, 951, 951, 951, 952, 952, 954, 955, 956, 956, 958, 960, 961, 961, 962, 963, 963, 969, 970, 971, 971, 973, 974, 975, 975, 976, 977, 977, 979, 979, 979, 980, 980, 981, 982, 982, 985, 985, 986, 987, 987, 991, 992, 993, 994, 994, 995, 997, 997};
    private Integer[] pass;
    private static final Integer[] PASSNEG = new Integer[]{74,-36,-65,-47,50,70,-57,-79,50,17,-80,89,36,70,48,-16,-65,-43,-45,81,94,-2,4,92,-50,84,-96,-10,18,-90,-65,-5,28,58,-52,-34,77,71,25,68,-67,-88,11,-15,89,-37,84,40,-47,92,78,-8,93,-90,83,-58,-81,-24,-21,15,6,90,-55,63,66,-27,-87,-89,17,-100,-89,59,-4,59,53,-8,77,58,45,50,52,-34,-78,78,52,-26,-21,-88,52,-28,-79,-50,78,85,-78,33,-64,96,-19,-77,-99,52,48,-13,-63,-100,-57,-14,-92,2,-3,-16,-15,-4,89,72,13,23,7,71,-20,50,54,-68,-36,-72,80,-76,-47,14,56,-47,-60,0,86,-57,-84,-81,-8,-62,90,95,-12,78,33,75,41,29,-79,-77,65,-31,56,42,-27,44,27,93,-44,0,-97,-85,-27,16,37,-22,-11,-72,-18,-42,-58,8,60,-2,-60,-84,-50,46,35,67,-78,40,-60,-44,-66,70,61,9,46,44,-90,68,-70,-58,12,-57,-78,-65,-49,28,-4,-46,-84,-82,-25,38,42,-82,-5,26,87,-12,-56,76,3,-50,-100,-8,-8,51,-4,-29,-45,67,-33,-57,-25,5,98,-54,87,22,-30,-67,40,-89,-48,-79,88,76,31,100,-25,41,88,19,-10,-70,57,51,39,11,46,-5,27,-14,13,-69,-54,-61,48,38,18,31,-26,85,-98,30,16,47,47,-39,-88,46,44,-71,93,53,-44,34,26,6,-52,-65,36,40,24,-76,-8,72,-37,97,-91,-43,-84,91,12,-12,66,-24,66,60,14,-84,-64,89,50,-9,21,27,-58,-30,57,-13,53,-48,-92,-49,-77,-37,96,34,57,-53,64,-91,-32,-31,-65,98,-5,-75,33,81,42,46,-81,-55,-79,-86,16,80,59,36,-12,-8,-84,-26,-2,-88,-46,79,22,-100,33,-51,21,-96,-77,-68,91,26,84,10,-58,-61,55,4,-40,-95,-42,31,-27,-56,-75,-88,71,-81,35,-96,43,-9,79,73,32,-53,-22,52,-5,-22,-13,82,-93,-83,-82,-37,15,97,98,-8,57,87,68,68,-54,79,88,-57,-43,-54,47,5,43,43,99,100,97,62,4,-9,25,-56,34,-40,-13,98,51,28,14,-64,61,85,-68,-36,-66,81,-26,43,-22,12,-7,53,96,-53,-96,-65,96,-8,38,37,-22,24,-42,-42,-69,-86,38,-86,66,6,-12,79,34,5,23,47,66,-63,-66,29,52,-32,53,-68,-7,2,94,17,-18,6,-74,18,7,-12,55,44,-27,70,-61,-27,96,67,-35,-35,24,43,60,-75,-22,-65};
    private static final Integer[] ANSNEG = new Integer[]{-100, -100, -100, -100, -99, -98, -97, -96, -96, -96, -96, -95, -93, -92, -92, -91, -91, -90, -90, -90, -89, -89, -89, -88, -88, -88, -88, -88, -87, -86, -86, -86, -85, -84, -84, -84, -84, -84, -84, -83, -82, -82, -82, -81, -81, -81, -81, -80, -79, -79, -79, -79, -79, -78, -78, -78, -78, -77, -77, -77, -77, -76, -76, -75, -75, -75, -74, -72, -72, -71, -70, -70, -69, -69, -68, -68, -68, -68, -67, -67, -66, -66, -66, -65, -65, -65, -65, -65, -65, -65, -65, -64, -64, -64, -63, -63, -62, -61, -61, -61, -60, -60, -60, -58, -58, -58, -58, -58, -57, -57, -57, -57, -57, -57, -56, -56, -56, -55, -55, -54, -54, -54, -54, -53, -53, -53, -52, -52, -51, -50, -50, -50, -50, -49, -49, -48, -48, -47, -47, -47, -47, -46, -46, -45, -45, -44, -44, -44, -43, -43, -43, -42, -42, -42, -42, -40, -40, -39, -37, -37, -37, -37, -36, -36, -36, -35, -35, -34, -34, -33, -32, -32, -31, -31, -30, -30, -29, -28, -27, -27, -27, -27, -27, -27, -26, -26, -26, -26, -25, -25, -25, -24, -24, -22, -22, -22, -22, -22, -22, -21, -21, -20, -19, -18, -18, -16, -16, -15, -15, -14, -14, -13, -13, -13, -13, -12, -12, -12, -12, -12, -12, -11, -10, -10, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -5, -5, -5, -5, -5, -4, -4, -4, -4, -3, -2, -2, -2, 0, 0, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 30, 31, 31, 31, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38, 38, 39, 40, 40, 40, 40, 41, 41, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 50, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 55, 55, 56, 56, 57, 57, 57, 57, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 62, 63, 64, 65, 66, 66, 66, 66, 66, 67, 67, 67, 68, 68, 68, 68, 70, 70, 70, 70, 71, 71, 71, 72, 72, 73, 74, 75, 76, 76, 77, 77, 78, 78, 78, 78, 79, 79, 79, 79, 80, 80, 81, 81, 81, 82, 83, 84, 84, 84, 85, 85, 85, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 93, 94, 94, 95, 96, 96, 96, 96, 96, 97, 97, 97, 98, 98, 98, 98, 99, 100, 100};
    private Integer[] passNeg;
    private static final Integer[] PASSSIMPLE = new Integer[]{5, 6, 8, 6, 2};
    private static final Integer[] ANSSIMPLE = new Integer[]{2, 5, 6, 6, 8};
    private Integer[] passSimple;

    @Test
    void recursiveSelectionSortTestSimple() {
        passSimple = Arrays.copyOf(PASSSIMPLE, PASSSIMPLE.length);
        Assignment4.recursiveSelectionSort(passSimple);
        assertArrayEquals(ANSSIMPLE, passSimple);
    }

    @Test
    void recursiveSelectionSortTest() {
        pass = Arrays.copyOf(PASS, PASS.length);
        Assignment4.recursiveSelectionSort(pass);
        assertArrayEquals(ANS, pass);
    }

    @Test
    void recursiveSelectionSortNegTest() {
        passNeg = Arrays.copyOf(PASSNEG, PASSNEG.length);
        Assignment4.recursiveSelectionSort(passNeg);
        assertArrayEquals(ANSNEG, passNeg);
    }


    @Test
    void recursiveBubbleSortTestSimple() {
        passSimple = Arrays.copyOf(PASSSIMPLE, PASSSIMPLE.length);
        Assignment4.recursiveBubbleSort(passSimple);
        assertArrayEquals(ANSSIMPLE, passSimple);
    }

    @Test
    void recursiveBubbleSortTest() {
        pass = Arrays.copyOf(PASS, PASS.length);
        Assignment4.recursiveBubbleSort(pass);
        assertArrayEquals(ANS, pass);
    }

    @Test
    void recursiveBubbleSortNegTest() {
        passNeg = Arrays.copyOf(PASSNEG, PASSNEG.length);
        Assignment4.recursiveBubbleSort(passNeg);
        assertArrayEquals(ANSNEG, passNeg);
    }

    @Test
    void isInLanguageTest() {
        assertTrue(Assignment4.isInLanguage("ABCFCBA"));
        assertTrue(Assignment4.isInLanguage("bffrgrffb"));
        assertFalse(Assignment4.isInLanguage("dsagnag"));
        assertFalse(Assignment4.isInLanguage("bffrgrffbo"));
    }

    @Test
    void convertToNumberTest() {
        assertEquals(525455432,Assignment4.convertToNumber("52 545 54 32 "));
        assertEquals(568328633, Assignment4.convertToNumber("568 32 8 63 3"));
    }

}